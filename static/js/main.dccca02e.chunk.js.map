{"version":3,"sources":["components/IndentedBlock.js","colors.js","components/Text.js","components/CommaSeparated.js","components/Toggle.js","components/JsonNode.js","components/Container.js","components/ResultContainer.js","components/GlobalStyle.js","components/Textarea.js","components/CopyButton.js","components/App.js","serviceWorker.js","index.js"],"names":["IndentedBlock","styled","div","_templateObject","colors","Text","span","Text_templateObject","props","success","danger","warning","info","muted","bold","CommaSeparated","CommaSeparated_templateObject","ToggleStyle","Toggle_templateObject","Toggle","_ref","show","onClick","react_default","a","createElement","nodeTypes","object","array","number","string","boolean","JsonNode","content","items","keyString","value","isRoot","_useState","useState","_useState2","Object","slicedToArray","isCollapsed","setIsCollapsed","type","Array","isArray","brackets","components_Text","concat","entries","map","_ref2","_ref3","key","components_IndentedBlock","index","initialMargin","_brackets","_brackets2","openingBracket","closingBracket","components_CommaSeparated","style","marginLeft","components_Toggle","state","length","Container","Container_templateObject","ResultContainer","ResultContainer_templateObject","GlobalStyle","createGlobalStyle","GlobalStyle_templateObject","Textarea","textarea","attrs","placeholder","Textarea_templateObject","CopyButtonStyle","CopyButton_templateObject","CopyButton","getText","wasClicked","setWasClicked","pre","document","setAttribute","innerHTML","body","appendChild","range","createRange","selectNode","window","getSelection","removeAllRanges","addRange","execCommand","removeChild","copyStringToClipboard","App","parsedInput","errorMessage","input","setInput","trim","JSON","parse","error","toString","Fragment","components_GlobalStyle","components_Container","components_Textarea","onChange","event","target","components_ResultContainer","components_CopyButton","stringify","components_JsonNode","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","components_App","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.dccca02e.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst IndentedBlock = styled.div`\n  border-left: 1px dashed silver;\n  padding-left: 24px;\n  margin-left: 4px;\n  margin-top: 2px;\n`;\n\nexport default IndentedBlock;\n","export default {\n  red: '#c82829',\n  blue: '#4271ae',\n  green: '#718c00',\n  orange: '#f5871f',\n  lightestGray: '#efefef',\n  lightGray: 'lightgray',\n  gray: 'darkgray',\n  darkGray: 'gray',\n  darkestGray: '#212529',\n  white: 'white',\n};\n","import styled from 'styled-components';\n\nimport colors from '../colors';\n\nconst Text = styled.span`\n  color: ${(props) => {\n    let color;\n    if (props.success) {\n      color = colors.green;\n    } else if (props.danger) {\n      color = colors.red;\n    } else if (props.warning) {\n      color = colors.orange;\n    } else if (props.info) {\n      color = colors.blue;\n    } else if (props.muted) {\n      color = colors.gray;\n    } else {\n      color = colors.darkestGray;\n    }\n    return color;\n  }};\n  ${(props) => props.bold && 'font-weight: bold;'};\n`;\n\nexport default Text;\n","import styled from 'styled-components';\n\nconst CommaSeparated = styled.div`\n  position: relative;\n  &:not(:last-child):after {\n    content: ',';\n  }\n`;\nexport default CommaSeparated;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport colors from '../colors';\n\nconst propTypes = {\n  show: PropTypes.bool,\n  onClick: PropTypes.func,\n};\n\nconst ToggleStyle = styled.div`\n  position: absolute;\n  display: inline-block;\n  left: -14px;\n  color: ${colors.gray};\n  &:hover {\n    color: ${colors.darkGray};\n    cursor: pointer;\n  }\n`;\n\nfunction Toggle({show, onClick}) {\n  return <ToggleStyle onClick={onClick}>{show ? '▾' : '▸'}</ToggleStyle>;\n}\n\nToggle.propTypes = propTypes;\n\nexport default Toggle;\n","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\nimport IndentedBlock from './IndentedBlock';\nimport Text from './Text';\nimport CommaSeparated from './CommaSeparated';\nimport Toggle from './Toggle';\n\nconst propTypes = {\n  keyString: PropTypes.string,\n  value: PropTypes.any,\n  isRoot: PropTypes.bool,\n};\n\nconst nodeTypes = {\n  object: 'object',\n  array: 'array',\n  number: 'number',\n  string: 'string',\n  boolean: 'boolean',\n};\n\nfunction JsonNode({keyString, value, isRoot}) {\n  const [isCollapsed, setIsCollapsed] = useState(false);\n  let type = typeof value;\n  if (type === nodeTypes.object && Array.isArray(value)) {\n    type = nodeTypes.array;\n  }\n  let content;\n  let items;\n  let brackets = ['', ''];\n  if (value === null) {\n    content = <Text danger>null</Text>;\n  } else if (type === nodeTypes.string) {\n    content = <Text success>{`\"${value}\"`}</Text>;\n  } else if (type === nodeTypes.number) {\n    content = <Text info>{value}</Text>;\n  } else if (type === nodeTypes.boolean) {\n    content = <Text warning>{value ? 'true' : 'false'}</Text>;\n  } else if (type === nodeTypes.object) {\n    items = Object.entries(value).map(([key, value]) => (\n      <JsonNode key={key} keyString={key} value={value} />\n    ));\n    content = <IndentedBlock>{items}</IndentedBlock>;\n    brackets = ['{', '}'];\n  } else if (type === nodeTypes.array) {\n    items = value.map((value, index) => <JsonNode key={index} value={value} />);\n    content = <IndentedBlock>{items}</IndentedBlock>;\n    brackets = ['[', ']'];\n  }\n  const [openingBracket, closingBracket] = brackets;\n  let initialMargin;\n  if (\n    isRoot &&\n    value !== null &&\n    (type === nodeTypes.object || type === nodeTypes.array)\n  ) {\n    initialMargin = 20;\n  }\n  return (\n    <CommaSeparated style={{marginLeft: initialMargin}}>\n      {keyString && `\"${keyString}\": `}\n      {openingBracket && (\n        <Toggle\n          show={isCollapsed}\n          onClick={() => setIsCollapsed((state) => !state)}\n        />\n      )}\n      {openingBracket}\n      {!isCollapsed && content}\n      {closingBracket}\n      {isCollapsed && (\n        <Text muted>\n          {` // ${items.length} item`}\n          {items.length !== 1 && 's'}\n        </Text>\n      )}\n    </CommaSeparated>\n  );\n}\n\nJsonNode.propTypes = propTypes;\n\nexport default JsonNode;\n","import styled from 'styled-components';\n\nconst Container = styled.div`\n  display: flex;\n  height: 100vh;\n  box-sizing: border-box;\n  padding: 10px;\n\n  @media (orientation: landscape) {\n    flex-direction: row;\n  }\n\n  @media (orientation: portrait) {\n    flex-direction: column;\n  }\n`;\n\nexport default Container;\n","import styled from 'styled-components';\n\nimport colors from '../colors';\n\nconst ResultContainer = styled.div`\n  position: relative;\n  display: flex;\n  flex: 2;\n  overflow: scroll;\n  font-family: monospace;\n  font-size: 1em;\n  background-color: ${colors.lightestGray};\n  border-radius: 0.25em;\n  margin: 10px;\n  padding: 10px;\n`;\n\nexport default ResultContainer;\n","import {createGlobalStyle} from 'styled-components';\n\nimport colors from '../colors';\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n  }\n\n  body, html {\n    margin: 0;\n    padding: 0;\n    line-height: 1.5;\n    color: ${colors.darkestGray};\n  }\n`;\n\nexport default GlobalStyle;\n","import styled from 'styled-components';\n\nimport colors from '../colors';\n\nconst Textarea = styled.textarea.attrs({\n  placeholder: 'Paste JSON here...',\n})`\n  flex: 1;\n  resize: none;\n  border-radius: 0.25em;\n  border: 1px solid ${colors.lightGray};\n  color: ${colors.darkestGray};\n  font-size: 1em;\n  margin: 10px;\n  padding: 10px;\n`;\n\nexport default Textarea;\n","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport colors from '../colors';\n\nconst CopyButtonStyle = styled.span`\n  color: ${colors.darkGray}\n  position: absolute;\n  top: .5rem;\n  right: 1rem;\n  font-size: 0.75rem;\n  font-family: sans-serif;\n  border-radius: 0.2rem;\n  z-index: 9999;\n\n  &:hover {\n    cursor: pointer;\n    color: ${colors.darkestGray}\n  }\n`;\n\nconst propTypes = {\n  getText: PropTypes.func.isRequired,\n};\n\nfunction CopyButton({getText}) {\n  const [wasClicked, setWasClicked] = useState(false);\n\n  function handleClick() {\n    setWasClicked(true);\n    copyStringToClipboard(getText());\n  }\n\n  return (\n    <CopyButtonStyle onClick={handleClick}>\n      {wasClicked ? 'Copied' : 'Copy'}\n    </CopyButtonStyle>\n  );\n}\n\nfunction copyStringToClipboard(string) {\n  const pre = document.createElement('pre');\n  pre.setAttribute('type', 'hidden');\n  pre.innerHTML = string;\n  document.body.appendChild(pre);\n  var range = document.createRange();\n  range.selectNode(pre);\n  window.getSelection().removeAllRanges();\n  window.getSelection().addRange(range);\n  document.execCommand('copy');\n  window.getSelection().removeAllRanges();\n  document.body.removeChild(pre);\n}\n\nCopyButton.propTypes = propTypes;\n\nexport default CopyButton;\n","import React, {useState} from 'react';\n\nimport JsonNode from './JsonNode';\nimport Container from './Container';\nimport ResultContainer from './ResultContainer';\nimport GlobalStyle from './GlobalStyle';\nimport Textarea from './Textarea';\nimport Text from './Text';\nimport CopyButton from './CopyButton';\n\nfunction App() {\n  const [input, setInput] = useState('');\n  let parsedInput;\n  let errorMessage;\n  if (input.trim() !== '') {\n    try {\n      parsedInput = JSON.parse(input);\n    } catch (error) {\n      errorMessage = error.toString();\n    }\n  }\n  return (\n    <>\n      <GlobalStyle />\n      <Container>\n        <Textarea onChange={(event) => setInput(event.target.value)} />\n        <ResultContainer>\n          <CopyButton getText={() => JSON.stringify(parsedInput, null, 2)} />\n          {errorMessage ? (\n            <Text bold danger>\n              {errorMessage}\n            </Text>\n          ) : (\n            <JsonNode isRoot key=\"\" value={parsedInput} />\n          )}\n        </ResultContainer>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","/* eslint-env node */\n/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}